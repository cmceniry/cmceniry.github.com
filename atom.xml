<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CorgaLabs Blog]]></title>
  <link href="http://cmceniry.github.com/atom.xml" rel="self"/>
  <link href="http://cmceniry.github.com/"/>
  <updated>2014-01-26T22:41:41-08:00</updated>
  <id>http://cmceniry.github.com/</id>
  <author>
    <name><![CDATA[Chris McEniry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Presenting at CascadiaIT 2014]]></title>
    <link href="http://cmceniry.github.com/blog/2014/01/26/presenting-at-cascadiait-2014/"/>
    <updated>2014-01-26T22:00:00-08:00</updated>
    <id>http://cmceniry.github.com/blog/2014/01/26/presenting-at-cascadiait-2014</id>
    <content type="html"><![CDATA[<p>Hey Kids! Big News!</p>

<p>I&#8217;ll be presenting at <a href="http://casitconf.org/casitconf14/">CascadiaIT 2014</a>! I&#8217;ve got two items:</p>

<ul>
<li><a href="http://casitconf.org/casitconf14/conference/tutorial-descriptions/">A Quick Introduction to System Tools Programming with Go</a> Tutorial</li>
<li><a href="http://casitconf.org/casitconf14/talk-descriptions/">Value Stream Mapping Your Workflows for Fun and Profit</a> Talk</li>
</ul>


<p>Registration is now open:</p>

<p><a href="http://casitconf.org/casitconf14/registration-is-now-open/">http://casitconf.org/casitconf14/registration-is-now-open/</a></p>

<p>So, if you&#8217;re anywhere near the Seattle area the second weekend in March, come on down to CascadiaIT!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More than just Pets and Cattle]]></title>
    <link href="http://cmceniry.github.com/blog/2014/01/11/more-than-just-pets-and-cattle/"/>
    <updated>2014-01-11T21:51:00-08:00</updated>
    <id>http://cmceniry.github.com/blog/2014/01/11/more-than-just-pets-and-cattle</id>
    <content type="html"><![CDATA[<p>wIt&#8217;s been said many times many ways that cloud) servers should be
treated like cattle, and not like pets. Looks like the first reference
is
<a href="http://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds">Bias</a>,
but there are quite a few others:
<a href="http://www.computerweekly.com/blogs/cwdn/2013/04/treat-cloud-servers-like-cattle-not-puppies.html">here</a>
<a href="http://www.gregarnette.com/blog/2012/05/cloud-servers-are-not-our-pets/">here</a>
<a href="http://www.theregister.co.uk/2013/03/18/servers_pets_or_cattle_cern/">here</a>
<a href="http://www.dameware.com/cmdprompt/are-your-servers-pets-or-cattle-.aspx">here</a>
just the top ones on a google search. The main idea being that we had
this tendency when the servers were fewer yet more longitudinal to
treat them delicately: putting care and feeding into each of them; now
that we (can) have large amounts of short lived instances, we can&#8217;t be
bothered with the same care.</p>

<p>That&#8217;s a completely valid way of thinking (it&#8217;s a great <em>place</em> to
be), so I&#8217;m curious as to where its limits are. In some ways, looking
at just servers that way is looking at a point in time and
capabilities and thought.</p>

<p>We&#8217;ve all had pet files. Remember that hand crafted config file that
you spent days of your life tweaking to get it just right? Maybe it
was specific to that host. At some point, you groomed it enough that
it became a golden file for your entire environment and you could copy
it and push it out to all of the other servers. Then you pushed it out
using some higher level config management system. Then you moved up
some semantic level and the file itself got abstracted into specific
resources, and those were composited and pushed out. So, files started
as pets, and by realizing that the file was only a model of something
that we actually cared about, they moved to cattle.</p>

<p>Really, pets are pets because you&#8217;ve become attached to them - you
can&#8217;t clone them, and it hurts to lose them. Cattle is cattle because
it&#8217;s easy to get another and it&#8217;s not a big deal if you lose
it. There&#8217;s a lot of different specific means to achieve these, but
it&#8217;s these two fundamental classes of properties that enable this
thinking:</p>

<p>1.) It&#8217;s easy to copy, and
2.) It&#8217;s easy to handle losing it (enter whatever you want to say
about antifrigilness here).</p>

<p>But thinking about files and servers is so the 2000-noughts. What are
our pets now?</p>

<p>Moving up from the server, is the cluster. Are clusters now the new
pets? or can we treat them as cattle as well? Given sufficiently large
IaaS services and strong configuration management systems and lots of
variable substitution (well, probably more like locally realized
global patterns), it&#8217;s actually fairly easy to fulfill property #1
above - copying. As for #2, if you have sufficient global load
balancing of any form (DNS, anycast, etc), you can easily route
traffic to working clusters, or more precisely, away from failing
(lost) clusters.</p>

<p>So, pulling further out, our clusters collapse into a service. Is that
our new pet? With even more config and *aaS and some client service
discovery (aka any sufficiently advanced delivery model), you can
certainly copy it. Though, if you lose your source code, it would
definitely take a bit to reproduce the service (get all those coders
together again, etc). What about losing it? Well, if you are a single
feature service inside of a larger service, you might be able to be
disabled, so you can lose it. But what about that larger service? I
think for most businesses, you can&#8217;t just lose it.</p>

<p>So, that&#8217;s your pet.</p>

<p>Maybe.</p>

<p>(One could examine businesses and business models and plans and use
the same comparisons, but I think this first point - what makes
something pet versus cattle across various object domains is copying
and dealing with lose - is done well enough, so my second point&#8230;).</p>

<p>There&#8217;s another way to slice (heh) this metaphor: milk. Not all cattle
is used for steak. Some cattle is used to produce a product, bulked up
again, then produce more of the same product. That cycle time might be
a little too short, so the metaphor might make a little more sense by
using different livestock - sheep. Some sheep are raise for mutton,
some sheep are raise for wool (and yes, you can do both, but
still). For the wool sheep, after the wool is reaped each year, you
have to let it grow out again before you can reap it again, all the
while caring for the sheep. The sheep itself stays around, but you
continue to reuse it.</p>

<p>That being said, you can use other sheep for the same purpose because
lots of wool is the same; and sheep have their own way to easily copy
each other well enough.</p>

<p>But you still don&#8217;t really want to lose a sheep. You still gotta deal
with it going away and getting the replacement there. The same really
applies to larger services (or businesses) - maybe you can copy it,
but you really don&#8217;t want to deal with it going away.</p>

<p>So, my second point is really that there&#8217;s a third category between
pets (hard to copy, hard to deal with loss) and (steak) cattle (easy
to copy, easy to deal with loss), and that&#8217;s of the milk cattle (easy
to copy, but still hard to deal with lose). This last category by its
very nature persists and is modified, rather than being destroyed and
rebuilt each time. All of those things that we had to think about for
when we wanted to change our pets still apply. Maybe it&#8217;s not to
servers, but the lessons learned are still valuable.</p>

<p>And lastly, not everyone is <em>there</em>. And not everyone who is <em>there</em>
is <em>there</em> for everything that they do (there&#8217;s probably a mix of
services made of cattle and services made of pets in a lot of
organizations). So don&#8217;t feel bad. Just figure out which one it should
be and work to improve.</p>

<p>PS Interesting enough, if we do the combinations of the above, there&#8217;s
the last class: a service which is hard to copy, but you can deal with
failure. I&#8217;m not really sure what that looks like, so I&#8217;m going to
leave it as an exercise for the reader. I&#8217;d be curious if anyone comes
up with something interesting. Contact me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS: Inverting the View]]></title>
    <link href="http://cmceniry.github.com/blog/2013/03/23/dns-inverting-the-view/"/>
    <updated>2013-03-23T12:14:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2013/03/23/dns-inverting-the-view</id>
    <content type="html"><![CDATA[<p>This is something that I&#8217;ve thought for a while, but am trying to get
the backlog of thoughts out.</p>

<p>I&#8217;ll admit that I run bind for DNS because it&#8217;s a &#8220;safe&#8221;
default. There&#8217;s many cons against it, but it does work well enough
for many-many situations. But one of the issues that I&#8217;ve run into is
that how views are managed are counter to how I would like them to be
managed 99% of the time.</p>

<p>Specifically, the Zones are children of Views and when working with
the underlying configuration files, you have to maintain two separate
sets of files (or point to the same files and have the same data). I
want it to be the opposite to some degree. I want to be able to
maintain one zone file which mixes views with some markup on the
records themselves.</p>

<p>This isn&#8217;t necessarily a bind thing; though, bind certainly sets the
stage for others. It matches most DNS servers because it matches how
the mental model of DNS Zone delegation goes, but that may not be how
the mental model of record management in the context of views should
be. There may also be technical limitation, if you&#8217;re mixing zone
delegation of children zones (e.g. record bad in zone
child.example.com) in one view and child records that existing
directly . But honestly, in those cases, I think it goes back to the
&#8220;that&#8217;s an antipattern that you really shouldn&#8217;t be doing even when
you think you should be doing&#8221; that gave rise to linting programs, so
I&#8217;m going to discount that a bit.</p>

<p>The key here is that when I work on records that are split DNS, I&#8217;m
doing it on a per-record basis. I have to ask the question when I&#8217;m
looking at the record &#8220;where should this be visible from?&#8221; In the
context of the per-record, it&#8217;s much easier to answer. When I look at
an entire zone, it&#8217;s a PITA to say &#8220;where should <em>all of these</em> be
visibile from?&#8221;</p>

<p>Another side effect we end up with is that due to this extra overhead
of managing the split zones, we end up with some intenal.example.com
zone. That &#8220;internal&#8221; starts polluting everything. Yes, it&#8217;s ugly, but
the problem is more than just aesthetics. If you want to move a host
from one side to the other, or have a host respond to both sides, or
have any SSL certificates anywhere, or not expose that you have a
secret &#8220;internal&#8221; domain, or avoid any of a whole host of problems
because DNS is so critical to how we run networks, then, well, then
you&#8217;re sunk.</p>

<p>Again, this isn&#8217;t necessarily limited to bind, and honestly, how bind
or any other DNS server implements it doesn&#8217;t really matter. The DNS
server should be responsible for serving out queries. A separate
service should be responsible for the management of DNS. Everyone
wants a nice pretty (for whatever your definition of pretty is)
administrative interface. That is something that is separate and
builds on top of it. Realistically, the admin interface can be very
different from the configuration files. That&#8217;s part of the whole
point, isn&#8217;t it? The semantics and languaged used by the admin
interface get mapped into different configuration formats. If you want
to add a new DNS service, all you have to do is figure out the
mapping. The biggest mistake we make sometimes is directly
implementing the configuration format of the specific DNS service back
in the administrative interface. While it&#8217;d be nice if they match up,
it&#8217;s more critical to have the administrative interface match the
model that you believe is the most appropraite for the people using
it, and sometimes that doesn&#8217;t match the configuration files.</p>

<p>Along those lines, although I like bind from a practical standpoint, I
also like the make of tinydns, largely because it does this well. In
tinydns configuration, you name your views:</p>

<pre><code>    %internal:10
    %external:
</code></pre>

<p>Then you can follow up with associating the actual records with each
view:</p>

<pre><code>    +www.example.com:1.2.3.4:::external
    +www.example.com:10.11.12.13:::internal
</code></pre>

<p>It&#8217;s all in one nice neat location to look at.</p>

<p>There&#8217;s three extensions that I&#8217;d make here:</p>

<ol>
<li><p>The location part should be a tag - so you can have multiple
locations specified in one line. Yes, this is an edge case since most
people only deal with two views (internal and external), but it does
have meaning if you have more than 2 views. For instance, if you have
public, sitea, and siteb, and don&#8217;t want &#8220;bothsites&#8221; to be public:</p>

<pre><code>  +www.example.com:1.2.3.4:::external
  +www.example.com:10.11.12.13:::sitea,siteb
  +bothsites.example.com:10.11.12.14:::sitea,siteb
</code></pre></li>
<li><p>The location indicator for tinydns is really an indicator of the
view that you want it to be present in, for whatever properties, of
which clientip/location is only one, apply to the view. Basically, I&#8217;m
arguing that tiny-dns should support equivalents to the
match-destinations parameters of bind&#42;.</p></li>
<li><p>Add some magic for GeoDNS and let it be its own &#8220;location&#8221;
tag. This is some syntactic sugar that makes it easier to do since
it&#8217;s so common today and interacts interestingly with views.</p></li>
</ol>


<p>&#42; Actually, I&#8217;m not arguing that tinsdns should support that, just
like I&#8217;m not saying that bind needs to support per-record view
attributes. When it comes down to it, if the proper way for tinydns to
handle the match-destionations parameter is to run multiple tinsdns
instances bound to different destinations, that&#8217;s perfectly fine. It&#8217;s
the administrative wrappers or management interface around the DNS
service itself that needs to support this semantic, and then map that
out to the DNS service.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firewall Rules from Models]]></title>
    <link href="http://cmceniry.github.com/blog/2013/03/19/firewall-rules-from-models/"/>
    <updated>2013-03-19T00:20:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2013/03/19/firewall-rules-from-models</id>
    <content type="html"><![CDATA[<p>I&#8217;m trying to put a little more meat to the bones of my <a href="http://blog.corgalabs.com/blog/2012/03/26/ancl-application-network-communication-language/">ANCL
discussion</a>. Unfortunately,
I can&#8217;t say that I have a tool for it all, <em>yet</em>, but there&#8217;s a bit
more of the theoretical basis for it. Some of the key requirements
forming around ANCL are:</p>

<ul>
<li><p>It abstracts the components involved - roles are used instead of
source IPs and destionation IPs.</p></li>
<li><p>It generalizes the communication patterns - models are built using
the roles; these models can be used in different locations by
identifying what composes the roles.</p></li>
<li><p>It can compose multiple models together - since the models are
composed of roles, using the same role in multiple models connects
them together (caveat in the second side note).</p></li>
</ul>


<p>I was reviewing some slidedecks and came across
<a href="https://github.com/bulletproofnetworks/ript">Ript</a> which has a <a href="https://speakerdeck.com/auxesis/ript-making-linux-firewall-change-management-resilient">good
presentation</a>. It
is a powerful abstraction over iptables. Bonus: It&#8217;s abstraction can
even be carried to other stateful packet filters, software or
hardware.</p>

<p>Comparing it to ANCL, there&#8217;s several key differences:</p>

<ul>
<li><p>A partition is not a connection of models, but a combination of
them. It&#8217;s an administrative domain which lumps multiple unrelated
connections together. This is by far the biggest difference and is a
matter of the mental models.</p></li>
<li><p>The labels aren&#8217;t the same as roles. They&#8217;re good for identifying,
but they aren&#8217;t then instantiated. There&#8217;s a single mapping, when
multiple would be useful. This seems like an implementation detail
that could be easily addressed.</p></li>
<li><p>It&#8217;s focus is on specific instantiations of the models. While the
rules would be portable to different devices, this limits its
ability to be ported to separate but similar situations. This seems
like it is a matter of changing conventions (e.g. the naming of the
labels), but might be more.</p></li>
</ul>


<p>The first item is what it really comes down to is that these are two
different mental and description models for the problem. Ript is a
firewall abstraction language, and not necessarily an application
communication description language. That being said, there are a great
many other pieces of Ript, not the least of it being something
concrete, that make it very useful and means I have some work here to
move ANCL to something that can compare.</p>

<hr />

<p>There&#8217;s also two parts that Ript has also incorporated which I&#8217;ll be
honest that I don&#8217;t know how to incorporate into ANCL:</p>

<ul>
<li><p>NATs and SNATs and other translations. In many ways, these are not
critical to the application communication pattern, at least, not
critical at an abstract level. It&#8217;s when it&#8217;s applied in specific
contexts where translations come into play.</p></li>
<li><p>&#8220;Bad Guy&#8221; Rejects. Like transactions, these aren&#8217;t critical to
application communication patterns - in fact, these are
anti-communication patterns. Necessary at times, but not something
that are accounted for when building the patterns.</p></li>
</ul>


<hr />

<p>The side note from above is that the roles aren&#8217;t completely what are
connected to each other. Consider two models:</p>

<ol>
<li><p>A three tier application model which has a &#8220;webserver&#8221; role, an
&#8220;application&#8221; role, and a &#8220;DB&#8221; role.</p></li>
<li><p>A DB model which has an &#8220;application&#8221; role and a &#8220;DB&#8221; role.</p></li>
</ol>


<p>As the application owner of the first model, I would elaborate the
nodes in the &#8220;application&#8221; role. Most likely, the &#8220;DB&#8221; would be
specified by the DBA. Conversely, as the DB owner, I&#8217;d elaborate the
nodes in the &#8220;DB&#8221; role, and leave the &#8220;application&#8221; role to someone
else. In either case, half of the equation is left unfilled. There&#8217;s
(at least) two ways to approach this:</p>

<ol>
<li><p>Since the key is to connect the two edges for the
&#8220;application&#8221;-&#8220;DB&#8221; together, the real role association happens
there. So, what language should be used to describe these &#8220;edge
roles&#8221;?</p></li>
<li><p>The ambiguity can be taken away if we insert &#8220;connection points&#8221; or
&#8220;service&#8221; points into each model. In this case, in the application
model, we replace the &#8220;DB&#8221; role with a &#8220;DB&#8221; connection point, and in
the DB model, we replace the &#8220;application&#8221; role with a &#8220;DB&#8221; connection
point. When joining these models together, we overlay the connection
points.</p></li>
</ol>


<p>Not sure which is the right way, so that&#8217;ll probably comes down to
implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A tale of two PaaSes]]></title>
    <link href="http://cmceniry.github.com/blog/2013/03/13/a-tale-of-two-paases/"/>
    <updated>2013-03-13T20:38:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2013/03/13/a-tale-of-two-paases</id>
    <content type="html"><![CDATA[<p>I spend a good amount of time trying to figure out if my operational
team can do much to make the general engineering efforts more
productive. We&#8217;ve followed the usual turns around self-service IaaS
and the like, and we&#8217;re now exploring the next level of
Platforms-as-a-Service. In exploring the options, I&#8217;m seeing two large
patterns.</p>

<p>On one hand, there are the &#8220;middleware centric and injection based&#8221;
PaaS models. These are the ones where the developer picks a
development middleware (Java Servlet, PHP, Node, Rails, etc), and adds
other parts in. As if by an after thought, a static file service is
added, or maybe a data persistance (i.e. database) service is
added. On a implementation level, these usually involve allocating
some compute and storage resource (e.g. a VM), installing the
middleware container, doing a baseline install of the add-ons, and
starting them all up inside that VM. There are some other
configuration items such as pointing it at some version control
repository, but also the developer is able to login onto the VM via
shell.</p>

<p>On another hand, there&#8217;s a &#8220;service focused&#8221; PaaS model. This feels
like the lesser named PaaS, though it probably has a larger install
because this is the model that AWS largely is. In this case, the
developer picks different service components (e.g. DB, cache,
messaging bus, etc) and composites them a bit more
independently. Underneath the control layer, each of the component
providers can implement their services in different ways - using
different VMs, processes, or internal containers (e.g. DB schemas w/
authnz) - based on what makes sense for that provider. There&#8217;s more
work for the developer here as they have to compose services across
different providers, and the developer doesn&#8217;t have direct access to
the underlying system, but in exchange, might have better options.</p>

<p>From an implementor&#8217;s perspective, I think the service focused model
is easier to maintain. This may not necessarily be the right reason to
go down that route, but when it comes to delivery, that matters a
lot. It&#8217;s also a bit more transportable - at this point in the
industry&#8217;s lifecycle, it&#8217;d be easier to migrate from one IaaS or
traditional Infrastructure to another. It&#8217;s also easier to extend this
model to other (traditional?) services such as monitoring. You can see
this in the industry - there&#8217;s many different service providers
focusing on a narrow niche offering around one specific service, but
fewer middleware centric vendors and even those that exist tend to
also include some service based model for the add-ons.</p>

<p>As I said, most of the traditional services called PaaS are the
form. So, what makes the application middleware so much different than
a data store? or a caching layer? Fundamentally, you have some level
of &#8220;service&#8221; which you want to present a clean interface to. This is
true for the database as well as for a java servlet container, yet
somehow we treat them a little differently in our heads. The only
reason I can imagine is that is where time is spent. As a developer, I
spend most of my time in the code, so that&#8217;s where my mind goes. But
while I run it, I want to have a better idea of how it fits in with
the other component services.</p>

<p>I think the vote is still out on which way has better long term
viability. And it may never be decided on. It may just be a matter of
preference.</p>

<p>Maybe PaaS isn&#8217;t the right term for this second model. These are more
Services-as-a-Service, which seems likely to be a great way to confuse
people. Mmaybe they&#8217;re more along the lines of Infrastructure, and are
just a different take on that. I&#8217;ll admit, I&#8217;m not sure what the right
way to refer to them is, but I believe that the use case that they
present is more than just an implementor&#8217;s fancy. It&#8217;s a valid use
case based on how developers are expecting to work with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring Discipline 1: Meter]]></title>
    <link href="http://cmceniry.github.com/blog/2012/10/02/monitoring-discipline-1-meter/"/>
    <updated>2012-10-02T23:52:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2012/10/02/monitoring-discipline-1-meter</id>
    <content type="html"><![CDATA[<p>In the last post, I talked about 4 different monitoring disciplines. In this, I&#8217;m talking about the first one: Meters; and try to distinguish some common Meter patterns.</p>

<p>I pick Meter for the first one for two reasons:</p>

<ul>
<li>It is the first one in the pipeline. It tends to be the closest to the feature being monitored.</li>
<li>It tends to be the mechanism that I (and I believe many others) think about first.</li>
</ul>


<p>The Meter is the basis of measurement. Whether it&#8217;s counting the number of bytes going through a network interface, a recording of events generated from snmp traps, a log watcher, or a stream of metrics coming out of an application, the Meter is any item that can be measured or status checked and the path for sending the measurements to consumers who are interested in them. These are two fundamental and distinct sides. In earlier days, they were typically intermingled in one feature or tool, but now technologies allow for different distinctions between those.</p>

<p>There are two main categories of data types for the Meters: numeric, and event based. The primary difference for these is distinguishing between looking at a specific value (or an aggregate or nonvalue items), and looking at a specific event. Numeric values have a continuous meaning - the read at time t will have a different but just as significant meaning than the reading at time t+1. Events on the other hand are not discernable in time - if I receive an event at time t, I may not know the state of the system at t+1 (sometimes I can do another poll, sometimes I can&#8217;t).</p>

<p>The Meter can use any number of mechanisms:</p>

<ul>
<li>SNMP Poll.</li>
<li>JMX Poll.</li>
<li>SNMP Trap.</li>
<li>Reviewing application logs and counting ERROR lines.</li>
<li>An application that exports mechanisms as a stream to some endpoint.</li>
<li>An application that sends events to a collector via syslog, a message queue or bus or chat protocol, an HTTP post to a web service, a generic mailbox mechanism.</li>
<li>An application that sends events via a message queue or bus to a collector.</li>
<li>A status/transactional check that grabs a web page and checks it for validity.</li>
</ul>


<p>We tend to want to turn Meters into a push versus pull argument, but it ends up being a false dicotomy. In many cases it depends on the perspective. An application which uses the <a href="https://github.com/codahale/metrics">metrics</a> will feel as it it&#8217;s pushing those data points out, but the collection engine that uses it may pull those data points via JMX calls.</p>

<p>The key with Meter is identifying What you want to be watching. Everything else is plumbing (as if saying that makes it all easier).</p>

<p>Note: While it can&#8217;t be discounted, the storage engine is not necessarily a part of the Meter. In many cases, the storage could also be used by the other disciplines. It&#8217;s capabilities impact Meters, but it is a technology area more than an area of monitoring work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Four Disciplines of Monitoring]]></title>
    <link href="http://cmceniry.github.com/blog/2012/08/15/four-disciplines-of-monitoring/"/>
    <updated>2012-08-15T10:39:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2012/08/15/four-disciplines-of-monitoring</id>
    <content type="html"><![CDATA[<p>(Release early, release often - a lot of the ideas here have some rough edges&#8230;)</p>

<p>There&#8217;s been a lot of run around at work recently about how our monitoring system isn&#8217;t sufficient. It&#8217;s something that we all recognize and we want to put effort into fixing it, but I don&#8217;t think we&#8217;re all pulling the same direction.</p>

<p>Because we&#8217;re not.</p>

<p>And to a degree that&#8217;s ok. There&#8217;s several different consumers of monitoring (or some variation on it), and each of us has different needs and wants out of it. That&#8217;s all fine and good.</p>

<p>Where we&#8217;re failing is trying to formulate our efforts together. Yeah, we can say we all have our own self-interests, or that we&#8217;re a large company (which we&#8217;re not really &#8220;large&#8221;) and there&#8217;s scale issues, or that we&#8217;re all focused on tools and not as many on the real results (that&#8217;s certainly true even though not everyone realizes it).</p>

<p>So, I&#8217;m trying to figure out the best way to address this. The key is to get us on the same page. Not that we have to have all of our concerns addressed, but more that we have them at least partially identified and shared with others. There&#8217;s an added issue that we&#8217;re all speaking different languages, or worse, the same language with many homophones. So, that brings me to this blog post.</p>

<p>There is a lot of confusion between Monitoring and Metrics. And to be fair, there&#8217;s a lot of overlap depending on how you look at it. In most cases, people see Monitoring for ok/fail status, and Metrics for trending. I feel those are lacking, but I&#8217;ll be honest in that I can&#8217;t well articular why.</p>

<p>As an alternative that I can articulate, I see monitoring as being composed of 4 disciplines (areas of study):</p>

<ol>
<li>Meters: The collecting of data points (both numeric and ok/fail).</li>
<li>Thresholds: The automatic analysis of data points to signify some event.</li>
<li>Responses: The manual and automatic actions that come after Thresholds trip.</li>
<li>Presentations: The dashboards, interfaces, and reports that people view, manipulate, and receive.</li>
</ol>


<p>I picked these pieces because they each have ramifications to various consumers (and producers) of the monitoring system. This do not represent the underlying technologies,but can be used to identify requirements. They also don&#8217;t represent all of the . I see them as features that users consider important from a monitoring system.</p>

<p>Using these, look at some of the use cases:</p>

<ul>
<li><p>A developer cares about Meters from the standpoints of identifying application Meters that matter, and the API for how to expose or pass those Meters off (something critical to remember is that a poor API will never be used). In many cases, the developer doesn&#8217;t care about Thresholds or Responses (arguably, if the developer does operational role, yes, but I&#8217;m considering that the op role). The developer wants to see a Presentation where they can get information out for their run of their specific pieces, for a load test, etc.</p></li>
<li><p>A planner cares about Meters from the perspective of specifying some application Meters that matter. He doesn&#8217;t care too much about Thresholds or Responses. He wants to see a Presentation of the long term trends of the running apps.</p></li>
<li><p>An operator cares about Meters from the perspective of having to make sure the plumbing is there to support it (e.g. snmp infrastructure, collectd infrastructure, storage, etc). He needs Thresholds to have valid meaning so that there aren&#8217;t many false positives. He is typically going to be doing or watching the Responses. He needs to have a Presentation that shows the current ok/fail status of everything, and if he&#8217;s astute, he&#8217;ll be watching for unrecognized local trends.</p></li>
</ul>


<p>These are high level use cases, and may not reflect directly the role differences that are cropping up. We can take these and be more specific about them, but for this blog, I&#8217;m going to be fairly generic.</p>

<p>These disciplines also show some of the differences that have cropped up between devs and ops. Generally (and yes, there are plenty of counter examples), devs care about the Meters and Presentations, while ops care about Thresholds and Responses. This is reflected by the typical tool choices.</p>

<ul>
<li><p>Graphite is a dev tool. Why? Because it focuses on the Presentation.</p></li>
<li><p>Collectd is a dev tool. Why? Because it focuses on the Meter API.</p></li>
<li><p>Nagios ia an ops tool. Why? Because it focuses on the Thresholds.</p></li>
<li><p>I got nothing on Responses as there&#8217;s some tools out there (knowledge bases, Orchestrator, etc) but nothing that I feel is too common.</p></li>
</ul>


<p>Just in here, I have two discussion points that show a bit of knowledge about those who compose the monitoring community. I hope this language will help additional discussions. A lot can be said for each of the disciplines. They probably deserve different posts on their own, but I&#8217;m not ready for that yet. Instead, I&#8217;ll close with a potpurri of miscellaneous comments:</p>

<ul>
<li><p>It&#8217;s naive to think that each discpline is self contained. They definitely have impact on each other from a practical standpoint.</p></li>
<li><p>Meters have at least two different subdisciplines: indirect Meters and live checks. This should not be confused with collectd pushes versus snmp polls or the like. I put both of those in the first category. The key difference is &#8220;Is this an observation of other data (# of bytes on an ethernet interface, # of errors in an error log, average user request transaction latency, etc), or is this an action that I&#8217;m performing to get some kind of status (synthetic transaction)?&#8221;</p></li>
<li><p>I&#8217;m still trying to sort out how single error events (say an error message from a user&#8217;s transaction, and snmp trap, etc) play with counting the number of errors. The later easily fits in Meter, but I&#8217;m not sure how to address the former. In the snmp trap situation, there&#8217;s typically a &#8220;countable&#8221; number of traps and sources that those can come from, so one could theoretically create a Meter for each of those. In the user error case, it&#8217;s getting past &#8220;countable.&#8221; Do you have a separate Meter for <em>every</em> user and does that have to be defined? There is probably some overlap with indirect Meters and live checks, but I&#8217;m still thinking about that. (And YES I know I&#8217;m useing &#8220;countable&#8221; incorrectly - I&#8217;m trying to signify the scale and it&#8217;s impact on managability)</p></li>
<li><p>Along the lines of snmp traps (and single error events in general), these can fall into the auto clearing Thresholds, or the manually clearing Thresholds.</p></li>
<li><p>Thresholds can have a combination of static and dynamic (derived from pervious data), current values (e.g. is this drive full?) and projected values (e.g. will this disk fill up in the next 4 hours?), and probably several other dimensions.</p></li>
<li><p>I&#8217;m very apposed to a system where you can only determine Thresholds at the point of the Meters. Sometimes the Meter has sufficient information to make that decision (e.g. static Threshold), other times it does not (e.g. Meter dependencies, dynamic Meters, etc).</p></li>
<li><p>Meters and at least Thresholds can also have their own Meters: how often was this Threshold in the tripped state? I.e. SLA counting.</p></li>
<li><p>Meters need to have some variabilty of time in time. If I&#8217;m looking at live debugging, I probably want much finer granularity (5 second/1 second?) than if I&#8217;m looking at capacity planning. While disk is cheap, can we really record all Meters at 5 second or 1 second intervals all the time? Does that have application impacts? Does it make more sense to say &#8220;for the next 15 minutes, record 5 second intervals <em>for these specific Meters that I&#8217;m observing</em>? (Presentation systems also have to account for this.)</p></li>
<li><p>Responses can be manual (e.g. I see a disk filling up, so I&#8217;m going to go clean up temp files) or automatic (e.g. a process sees a disk filling up, so it goes and cleans up time files). Heh - &#8220;If you can&#8217;t make it a process, you can&#8217;t automate it.&#8221; The Responses really reflect a maturity of the overall application response cycle. In that cycle, it typically goes: operator sees the alert and responds manually, operator writes up the typical response so other operators can response accordingly, someone comes along and automates the response so the write up can be much shorter. The side effect of this lifecycle is that Response systems include the knowledge bases that the complex/unautomated responses are collected in.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First pass on clojure-jmxxmppgateway]]></title>
    <link href="http://cmceniry.github.com/blog/2012/08/13/first-pass-on-clojure-jmxxmppgateway/"/>
    <updated>2012-08-13T23:42:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2012/08/13/first-pass-on-clojure-jmxxmppgateway</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been playing around a bit with clojure. It&#8217;s nice to cut my teeth on somewhat LISP code. I&#8217;m not going to debate a lot of the language merits; I&#8217;m just going to say that I&#8217;m enjoying it.</p>

<p>I dusted off a project that&#8217;s been sitting for a bit as it&#8217;s cropped up again. I&#8217;m doing a lot more java work, and am in need to a JMX manager. Well, more that I&#8217;m in need of a way of accessing a JMX interface.</p>

<p>Originally, I had been using the <a href="http://crawler.archive.org/cmdline-jmxclient/">command-line JMX Client</a>, but I kept running into 2 problems when running that my monitoring instance (had been using cacti + nagios):</p>

<ol>
<li>The startup time for the jvm for the command-line client was too expensive. When attempting to run it against several different servers and several different metric points, it over ran the polling interval.</li>
<li>JMX and firewalls - @wheee.</li>
</ol>


<p>So, I started by translating JMX to the universal application transport protocol: HTTP. The first project is clojure-jmxhttpgateway. It takes a GET with JMXConn=$hostname:$port, JMXBean, and JMXAttribute as parameters, and passes that back to the JMX engine to get the ways and returns it back. It works pretty well, and took out the gaps in my cacti graphs.</p>

<p>That was two years ago. I made a couple of changes recently.</p>

<p>First, I updated the HTTP gateway to use the latest clojure and ring web framework. The second change was a little crazier. I like XMPP, so I figured I&#8217;d see what could come out of it and this is what I got:</p>

<pre><code>8:33:32 PM Chris McEniry: localhost:4270|java.lang:type=Memory|HeapMemoryUsage
8:33:32 PM clj@chriss-macbook-air.local: HeapMemoryUsage : {:committed 85000192, :init 0, :max 129957888, :used 8645872}
</code></pre>

<p>I like clojure. One of the fun parts - it&#8217;s only 79 lines of code for the XMPP gateway. Sure, there&#8217;s not much configurability to it, but that&#8217;s still a lot to do in such a small set. It&#8217;s really just a first pass, but it&#8217;s a fun start.</p>

<p>Some immediate items for the (near?) future:</p>

<ol>
<li>Add security back in - be able to connect to a JMX listener with either SSL enabled and/or user/password auth.</li>
<li>Add write access - currently it&#8217;s only doing reads.</li>
<li>Add a second layer of security - since it aggregates several connections, it needs to restrict who can connect to it/what they can request.</li>
<li>Refactor the utils from the XMPP and HTTP gateways. Right now, there&#8217;s a lot of duplicated code which needs to be pulled out. At the same time, I don&#8217;t want one project that&#8217;s pulls in too many dependencies - e.g. if you&#8217;re only running the HTTP gateway, you shouldn&#8217;t need to get the XMPP libs and vice-versa. In general, the code and just use several cleanups.</li>
<li>Need tests.</li>
<li>Better config files - i.e. fix the XMPP gateway so that it actually uses a config file.</li>
<li>Do the library name spaces &#8220;the proper way&#8221; - i.e. include domain name in them.</li>
</ol>


<p>I think I have my work cut out for me.</p>

<p>If you&#8217;re interested in any of this, check out the github repos:</p>

<ol>
<li><a href="https://github.com/cmceniry/clojure-jmxhttpgateway">https://github.com/cmceniry/clojure-jmxhttpgateway</a></li>
<li><a href="https://github.com/cmceniry/clojure-jmxxmppgateway">https://github.com/cmceniry/clojure-jmxxmppgateway</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[abUser Stories]]></title>
    <link href="http://cmceniry.github.com/blog/2012/04/28/abuser-stories/"/>
    <updated>2012-04-28T10:25:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2012/04/28/abuser-stories</id>
    <content type="html"><![CDATA[<p>Was just listening to <a href="http://www.pauldotcom.com/">PaulDotCom&#8217;s security podcast</a>
(<a href="http://traffic.libsyn.com/pauldotcom/PaulDotCom-283-Part2.mp3">283</a>)
[NSFW], and they made a comment about &#8220;Abuse Cases.&#8221; I haven&#8217;t dug
into it yet, but I really like the sound of that. Part of it is a bit
tongue in cheek, but there&#8217;s more there. I&#8217;m constantly subjected to
the Use Case and the User Story, and most of the time, those are
feature focused:</p>

<pre><code>As a user, I want to be able to store my data...
</code></pre>

<p>Now, that&#8217;s not always the case, as we&#8217;ve been able to get some others
in there:</p>

<pre><code>As a day-to-day operator, I need to be able to perform
maintenance on a node.
</code></pre>

<p>and</p>

<pre><code>As a day-to-day operator, I need to be able to collect metric X to
see the health of the system.
</code></pre>

<p>So, there&#8217;s definitely credence to the idea of &#8220;Users stories are for
everyone,&#8221; or &#8220;All of use are users,&#8221; so why would we need to use a
different term. Couldn&#8217;t we just say that it&#8217;s all already covered?</p>

<p>Well, there&#8217;s two things that I think are ignored there.</p>

<p>First, I&#8217;m currently been working a great deal on compliance, so I&#8217;m
thinking of it as Role Separation. A User is a very specific role that
is very different from an Operator, or an Attacker, or even subclasses
of those (Store Operator versus System Operator versus Application
Operator).</p>

<p>Second, <a href="http://en.wikipedia.org/wiki/Linguistic_relativity">language affects the way we think</a>.
This is not new, this is not some crazy idea. We have so much baggage
with each term that already exists.</p>

<p>To me, a User Story is feature focused. It explores the Positive
Space. We could include the operational examples as part of
this. These are things we <em>want it to do</em>.</p>

<p>On the flip side, an Abuser Story is anti-feature focused. It explores
the Negative Space. It&#8217;s for things we <em>don&#8217;t want it to do</em>.</p>

<p>Judy Neher has a presentation at Agile 2012 for <a href="http://submit2012.agilealliance.org/node/13318">Abuser Stories: Thinking Like the Bad Guy to Reduce Security Vulnerabilities</a>.
I look forward to seeing what comes out of that.</p>

<p>Yes, I see the slippery slope that I&#8217;m on. We could get so prolific
that every type of story actor gets their own top level
classification. The User Stories approach does make you think through
the different roles that will use it, so all of the different top
level labels may be superfluous. There is validity to that
concern.</p>

<p>But with the baggage, I think that adding something with emphasis may
be necessary for a time. Until it&#8217;s widely accepted about bringing in
the negative space, I&#8217;m going to keep using the term Abuser Stories
(assuming I&#8217;m not treading to much on victims of violence&#8230;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOO: Pids over People]]></title>
    <link href="http://cmceniry.github.com/blog/2012/03/31/soo-pids-over-people/"/>
    <updated>2012-03-31T06:24:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2012/03/31/soo-pids-over-people</id>
    <content type="html"><![CDATA[<p>tl;dr</p>

<p>I come here not to <em>bury</em> NoOps, but to <em>praise</em> it.</p>

<ol>
<li>There are two extremes when it comes to service management: small
tight team doing Dev and Ops roles, and separate teams for Dev and
Ops. Both of these will exist at various times for various scope.
In the middle is confusion.</li>
<li>As Ops teams, we can enable Dev teams by providing them ways to
enable themselves. Let&#8217;s figure out how to provide XaaS
more. Infrastructure, Config/Deploy, Monitoring, etc. XaaS doesn&#8217;t
have to mean an API but it does mean a very predictable response.</li>
<li>As engineering(Dev+Ops) groups, we all like the idea of putting
together a project using a small/dedicated team with no
externalities. XaaS helps this to the degree that some items are
decoupled, but there&#8217;s a level of knowledge that XaaS can&#8217;t convey,
so let&#8217;s figure out how to make that happen.</li>
<li>No size fits all, so you have to constantly evaluate and bounce
back and forth on a service by service basis, and figure out how to
fill in gaps while you&#8217;re transitioning from one to the other.</li>
</ol>


<h3>Disclaimer</h3>

<p>Bias alert: I&#8217;m an Op, and there is a bit of frustration here (it
comes out as sarcasm). I like to think I&#8217;m opened minded but I am
being a bit irrational here.  so tread forward with that in mind. My
goal is to improve not justify myself.</p>

<p>And to be fair, this doesn&#8217;t just apply to Dev and Ops. It can also
apply to Sec, QA, Data Analysis, etc. It&#8217;s just a matter of how
coupled some of these are. DevOps is just on my radar, so that&#8217;s my
focus.</p>

<p>This is my first attempt at a longer form (almost 3x my previous
longest post). I&#8217;m attempting to make it not sound like a load of
stream of consciousness dribble, so&#8230; be gentle.</p>

<h3>References</h3>

<p>There&#8217;s been a lot of talk about DevOps and NoOps over the past
week. I can&#8217;t say how it started, so I&#8217;ll pick it up with
<a href="http://perfcap.blogspot.com/2012/03/ops-devops-and-noops-at-netflix.html">Cockcroft</a>.
It&#8217;s a nice piece on how Netflix does their internal product
development (lots of automation and relying on services instead of
groups - <em>remember this part</em>). There&#8217;s some commentary over the
terms. I probably have the same reaction to it as
<a href="https://gist.github.com/2140086">Allspaw</a> does, but similar
<a href="http://blog.ingineering.it/post/19383804543/devops-vs-noops-misses-the-point">to</a>
<a href="http://www.edwardcapriolo.com/roller/edwardcapriolo/entry/noops_devops_yesdilusional_no_it">others</a>,
I don&#8217;t think operational aspects are going to go away. And Cockcroft
even follows up with &#8220;I think we agree to call it PaaS,&#8221; so it&#8217;s not
so much about the terms.</p>

<p>To spell it out, there&#8217;s 2 threads here:</p>

<ol>
<li>There is a move to use services (i.e. APIs, XaaS)</li>
<li>You can&#8217;t get rid of operational concerns, but you may have to
focus the resources differently.</li>
</ol>


<p>I don&#8217;t think people will argue with the later, so I want to know what
the former means. I&#8217;m starting with how I saw it come about.</p>

<h3>The DevOps/Dev Ops Cycle</h3>

<p>I think a lot of organizations follow a similar pattern:</p>

<p>Small team develops a platform and people wear the dev and ops
hats. Platform grows and gets too big for a small team to manage. The
team is spending too much time fire fighting and in operational
aspects, so they specialize. Eventually, you end up with a Dev side
and Ops side which are (or have grown to be) completely different
people. The smart (and humble) ones feel like it&#8217;s too disjointed and
don&#8217;t feel like they can move the organization (too big, too much
inertia), so they splinter off on a skunksworks project with a small
team. The smart but not humble ones just see the other side as a bunch
of oafs, so they splinter off on a skunksworks project with a small
team.</p>

<p>Repeat ad nasuem.</p>

<p>The pendulum swings back and forth. Is this the way it has to be?</p>

<p>Going back to Allspaw:</p>

<pre><code>Etsy has an Operations org, people with "Operations" in their
title, and yet don't have a culture of red tape like you
describe. The premise you're implying doesn't exist here (that Ops
are grumpy people that say no all the time and are a source of
frustration and holdups) and I'm willing to bet it's the same in
other companies.
</code></pre>

<p>I&#8217;m probably not as optimistic as I think Allspaw is about the number
of companies, but there certainly are some. He continues:</p>

<pre><code>My definition of Ops involves the responsibility to make it safe
to make whatever change to production is necessary, at the rate
that it is necessary for the business to evolve.
</code></pre>

<p>There&#8217;s a bit of paternalism here, but I will conceed that for
recognizing that we&#8217;re enabling for a goal here. That goal is one that
allows anyone who needs to to make changes (i.e. contribute) to
production while at the same time taking out precautions against
issues that may crop up due to those changes.</p>

<p>Alas, I think some devs just don&#8217;t see this and instead have to deal
with Ops groups that can&#8217;t respond to their needs. It&#8217;s not
necessarily a problem with the Ops team, but that the Dev sees the Ops
as a roadblock. Yea, sometimes the Ops teams is just lacking. Other
times, it&#8217;s overwhelmed as it has to respond to everyone else and
can&#8217;t focus on its needs looking forward. And I have to mention those
Devs that just don&#8217;t give a damn and are going to do it their way come
hell or high water.</p>

<p>So, they turn the cycle around again and toss the baby (operational
experience) with the bath water (unresponsive ops team). They go
looking for ops sides (XaaS) that can respond - even if it is in a
limited way, and not a way that is tailored to them. They adapt their
processes to work within the framework that at least gives them some
predictability and how they want it.</p>

<h3>#NoPeople</h3>

<p>(Apologies to Cockcroft here. I&#8217;ve respected him since his
VirtualAdrian days but this may not being completely fair to him.)</p>

<p>Cockcroft&#8217;s article is littered with this pattern:</p>

<pre><code>Individual Cassandra clusters are automatically created by Priam,
and it's trivial for a developer to create their own cluster of
any size without assistance (NoOps again).
</code></pre>

<p>&#8220;Without assistance&#8221; - no people.</p>

<pre><code>...we have hundreds of developers using NoOps to get their code
and datastores deployed in our PaaS and to get notified directly
when something goes wrong.
</code></pre>

<p>&#8220;Developers&#8230; get notified directly&#8221; - no people.</p>

<pre><code>...no need for the developers to interact with ops people to get
things done.
</code></pre>

<p>&#8220;No need&#8230; to interact&#8221; - no people.</p>

<p>I&#8217;m not sure if #NoOps is the right hash or #NoPeople is. Yes, the dev
is involved but not in all cases:</p>

<pre><code>We have built tooling that removes many of the operations tasks
completely from the developer.
</code></pre>

<p>I have to read from that that the real goal is to completely remove
people from the picture. That&#8217;s not necessarily a bad thing. Good
automation has always been a goal of any real (Ops?) organization
worth its salt, even with the ever present
worry-about-automating-yourself-out-of-a-job thought process. But this
isn&#8217;t strictly about automation. It&#8217;s about removing roadblocks or
unpredictables out of the equation. It&#8217;s about taking <em>other</em> people
out of the picture. Let&#8217;s call-a-spade-a-spade.</p>

<p>&lt;pithydiversion&gt; Let me flip it around. Here&#8217;s my next user
story: As an Op, I would like an automation button for a feature
change instead of having to explain it to a developer, and then get it
into their backlog, get it prioritized, get it implemented, tested,
and then eventually released to me to be rolled out (with
documentation?). I would be claiming ownership over #NoDev, but I
think @DEVOPS_BORAT has beaten me to <a href="https://twitter.com/#!/DEVOPS_BORAT/status/108335303382663169">that</a>.
&lt;/pithydiversion&gt;</p>

<h3>SOO or OaaS or PoP</h3>

<p>So, we keep replacing people with some service or API, and lead to the
logical conclusion is that people no longer interact with each other;
instead, we interact with whatever service or API that someone else
has offered. I&#8217;m not sure if this is:</p>

<ul>
<li>Service Oriented Organization</li>
<li>Organization as a Service</li>
<li>Processes(pids) over People</li>
</ul>


<p>To be fair, I have to say that I do appreciate this approach from an
actual service offering. I have to give a nod to
<a href="https://plus.google.com/112678702228711889851/posts/eVeouesvaVX">Yegge</a>
here. It shouldn&#8217;t surprise us that we&#8217;re doing the same thing with
the organization as we are with our service components.</p>

<p>The ultimate form of the Dev/Ops divide is using a separate service
just as you would use an API. Of course, that&#8217;s only a divide around
one factor (infrastructure versus platform, platform vs app, etc). As
has been said before &#8220;AWS becomes your Ops team.&#8221;</p>

<p>This is efficient, right? Maybe, but that&#8217;s not what&#8217;s getting to
me. Why does it bother me? There&#8217;s two reasons.</p>

<h3>The Agile Manifesto Doublestandard</h3>

<p>As an Op, I feel like there&#8217;s a double standard here. For 10 years,
we&#8217;ve been hearing how Agile was supposed to fix the problems between
Product Management and the Development sides of the organization. The
key has been interaction and adaptability because predictability has
always been lacking.</p>

<pre><code>People over Process.
</code></pre>

<p>The downside has been that since you&#8217;re going for these short
interations, any externality can totally derail your sprint.</p>

<p>So, when interacting with an under-responsive Ops organization, the
Devs just see them as a roadblock, not as something to work with. (I&#8217;m
projecting:)</p>

<pre><code>Screw people over process. We want process over people if process
is more predictable.
</code></pre>

<h3>Masters of our own Destiny</h3>

<p>I used to think that it really came down to control. Everyone wants to
be in control. Ops want to be in control of production. Dev was to be
in control of the service. That&#8217;s not the real case (well, it is in
some highly disfunctional people).</p>

<p>&lt;rant&gt;I believe that I want to work in an organization that is full of
people respecting each other. Maybe I&#8217;m being naive - it&#8217;s a
dog-eat-dog business world.</p>

<p>Well, if that&#8217;s the case, <a href="http://www.youtube.com/watch?v=35TbGjt-weA">fuck that</a>.</p>

<p>Since I&#8217;m not going to conceed that quickly, I&#8217;m going to stick with
my naivety and plow forward.&lt;/rant&gt;</p>

<p>I think it&#8217;s more about being MoooDy - Masters of our own Destiny. I
think we&#8217;re climbing Mazlow&#8217;s pyramid to self-actualization, even if
we don&#8217;t realize or acknowledge it.</p>

<p>The key from that is being able to work together better, and part of
that is for the Ops side to deliver in a predictable manner (be it
manually, or automatically) to help Devs reach the top of that
pyramid.</p>

<h3>People are not pids</h3>

<p>The second reason is as simple the fact that people are not pids. A
service is ideally (warning: SOA and Unix mentality here) meant to do
one thing and do it well. A person on the other hand usually
doesn&#8217;t. In fact, if there&#8217;s a person who does, it&#8217;s not that way
for long. He quickly becomes obsolete and the rest of us move on.</p>

<p>Author Unknown (though I heard it from Harvey Mackay):</p>

<pre><code>Amateurs practice till they get it right. Professionals practice
until they can't get it wrong.
</code></pre>

<p>You can&#8217;t ditch people with Ops experience without taking the
hit. You can recover from that, but it&#8217;s still a hit. You want to
preserve the focus and practice.</p>

<p>There&#8217;s only so much that services at this time can do. They have to
completely evolve. And while they&#8217;re evolving, you want good people to
be able to fill in the gaps.</p>

<h3>The in-house trap</h3>

<p>I think there&#8217;s a case that demonstrates the above for the
process.</p>

<p>Consider that an in-house infrastructure team does its job well. It&#8217;s
listened to development, and provides a beautiful IaaS interface and a
beautiful Deployment-aaS interface. If the process doesn&#8217;t change (for
even something as insignificant as if the developer <em>doesn&#8217;t like
it</em>), it&#8217;s started to be seen as unresponsive just as Ops teams in the
past have been seen. Development&#8217;s immediately found a reason for
going with some other service (i.e. some other &#8220;Ops&#8221; team). Another
skunkworks project is started and we spin the cycle once again.</p>

<p>This turns into a catch-22 if the service couldn&#8217;t change because it
was servering Development on the whole but there&#8217;s even one dev
breaking from the herd. Given that organizational issues run deeper
than any Dev/Ops devide, what are the chances of that?</p>

<h3>Coupling trap</h3>

<p>SOA/XaaS works well when there&#8217;s a loosely decoupled aspect to
everything. Once that goes out the window, the level of complexity
goes off the rails.</p>

<p>Likewise, XaaS works well when it&#8217;s loosely decoupled.</p>

<p>For example, consider an PaaS/IaaS. A running application is heavily
dependent upon the system it runs on. Libraries have to be installed,
and they need to match version (and get updated hand-in-hand). Kernel
APIs have to match up, or at least behave similarily. It&#8217;s hard to
decouple apps from the underlying system. So, creating a PaaS there
(or IaaS if you want to see it that way) can run into some edge cases
that make it very tricky (repeat the in-house trap).</p>

<h3>#DevOps</h3>

<p>So, there are cases when XaaS doesn&#8217;t cut it. What do you do? Mix the
roles in with who&#8217;s doing them, which leads me to DevOps.</p>

<p>There&#8217;s a bunch of commentary on it, so I won&#8217;t rehash that. Suffice
to say that people have to handle both dev and ops
responsibilities. This can be either in the Dev part of the
organization (e.g. responsible for running a customer facing service),
or it can be in the Ops part of the organization (e.g. responsible for
running an internal customer facing service).</p>

<p>Well, this can have it&#8217;s own problems. Consider compliance. There are
compliance standards that require a separation of Ops from Dev. I have
no idea how to approach this one, but any devops move or adding
self-service seems to fly against this. But it remains a piece that
has to be accounted for. If someone can explain to me how any of this
can be PCI approved without the separation of duties, I&#8217;d be eternally
grateful&#8230;</p>

<p>You also have to consider the scaling cases. Services grow, teams
grows, and as we approach communication issues, we have to fragment
them. Sometimes you fragment the service; sometimes you fragment the
teams.</p>

<h3>Service Catalog and Service Lifecycle Management</h3>

<p>So, when you&#8217;re back to Dev and Ops and don&#8217;t have an XaaS setup yet?</p>

<p>ITIL (&lt;groan&gt; - hear me out) has an idea of a <a href="http://www.knowledgetransfer.net/dictionary/ITIL/en/Service_Catalog.htm">Service Catalog</a>.</p>

<p>It&#8217;s basically a menu of what the IT organization provides you. It&#8217;s
not specific about whether this be provided by people or by an
automated process or by self-service. The key is to define it in
business terms and include costs and SLAs.</p>

<p>In addition, there&#8217;s the Service Lifecycle Management. It basically
handles how new service offerings roll in, or more useful to this
discussion, how service offerings evolve. This provides the
adaptation that is required. As the service matures, it natually moves
out from being a human led service and into a XaaS led service.</p>

<p>There&#8217;s something to be said for Lean and just in time service
delivery, but I&#8217;m just not articulate enough to incorporate that in
yet.</p>

<p>The key here is that it doesn&#8217;t have to be an API. Though, I do have
to conceed, an API usually has a very well defined (though maybe not
documented) service catalog. Can&#8217;t really beat that.</p>

<p>And yes, I&#8217;m bringing ITIL in here. Whether you agree with the full
stack or not, there are some useful parts of it.</p>

<h3>The spectrum</h3>

<p>On one side you have small tight teams. On the other side, you have
separate and efficient Devs and Ops teams (with a XaaS being a valid
form there). In the middle is&#8230; muck. It&#8217;s where you don&#8217;t want to
be. You want to go one way or the other. Both sides can exist at the
same time, but they need to be distinctively on the sides, not
averaging in the middle. How do you get there?</p>

<p>To get to DevOps, you move your teams so that you&#8217;re embedding
functionality around various services. This means pulling people out
of their traditional comfort zones and putting them into something
that rounds them out.</p>

<p>To get to Dev and Ops, you have to put together a good service
catalog. You can either spell it out with people, or by figuring out
how to create some sort of XaaS offering. Ironically (or not?), that
XaaS offering&#8217;s team will probably start off looking like a DevOps
team (hence why both sides of the spectrum can exist at once).</p>

<p>In all of these cases, we&#8217;re talking about real people and these
decisions have consequences. We have to remember that and go back to
the Agile motto of &#8220;People over Process.&#8221; So, above all you have to
have honest communication as what&#8217;s needed, what&#8217;s missing, and what&#8217;s
open to be experimented with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANCL: Application Network Communication Language]]></title>
    <link href="http://cmceniry.github.com/blog/2012/03/26/ancl-application-network-communication-language/"/>
    <updated>2012-03-26T20:16:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2012/03/26/ancl-application-network-communication-language</id>
    <content type="html"><![CDATA[<p>I&#8217;m starting a new project aimed at handling firewall policies in a
sane way. Well, it&#8217;s not so much the firewall policies themselves, as
it about how we think about the firewall policies, or more precisely,
about how we think about the application policies themselves.</p>

<p>All firewall configurations that I&#8217;ve been part of have come about in
a specific pattern:</p>

<ol>
<li>Someone writes an application, and puts together some documentation
that, if we&#8217;re lucky, includes a visio of how the application
talks. Most of the time, it&#8217;s something closer to a &#8220;open these ports
on your firewall to make this happen.&#8221;</li>
<li>A sysadmin/app engineer/gwmth(guy who makes things happen - some
future post) looks over the documentation and identifies specific
hosts (IPs really) based on where the app components are running. He
puts together a ticket asking for specific ports to be open for
specific IPs or ranges. If you&#8217;re lucky (I&#8217;ll admit, I&#8217;ve been that
lazy admin), the admin puts together a visio of how it is all laid
out.</li>
<li>A netadmin takes the rules from the sys/app admin, tries to match
them up to existing rules or network ranges and adds them to the
firewall. If it&#8217;s not a stateful device, it&#8217;s worse than that as
you&#8217;re limited by the language.</li>
</ol>


<p>So, we&#8217;ve got a little game of operator going on here. On top of that,
usually the only permanent records of the change show up in two
places: any ticketing system, and the firewall itself. This means that
to try to figure out what happened, you have to go sort through
tickets or reverse engineer it from the firewall itself.</p>

<p>If you&#8217;ve ever had to deal with this, you end up having to reverse
engineer it all the time.</p>

<p><strong>This doesn&#8217;t work.</strong></p>

<p>There&#8217;s now <a href="http://www.redsealnetworks.com/">tools</a> that will help
you with this, be more efficient at it. They look at all of the rules
and you can go back and check to see what&#8217;s approved for what. But the
modelling is still done on a &#8220;this IP has access via this port to this
other IP, and this collection of IPs/ports are this model.&#8221; But it&#8217;s
still approaching it the wrong way - and if you&#8217;re more efficient at
doing the wrong thing, you&#8217;re just doing it wronger.</p>

<p>These tools do other things, but from an application perspective,
they&#8217;re very late in the game. So, late that it feels like we&#8217;re doing
network management backwards. I think we gotta go back to the
beginning. Instead of focusing on the network and building rules from
there, I want to start with the application and derive the rules from
there.</p>

<p>And yes, before we go there, documentation is good. I&#8217;m not trying to
give people a pass on the documentation. I&#8217;m trying to find a way that
makes it easier to document. So, keep that in mind.</p>

<p>Imagine that when you write an application, you can also easily
identify what network communication is needed relative to the
components for you application. For example, look at a simple LAMP
application. It fundamentally, has 3 components:</p>

<ol>
<li>the Database,</li>
<li>the Web Server, and</li>
<li>the web site consumers.</li>
</ol>


<p>And we can readily identify what access is needed:</p>

<ol>
<li>The <strong>Web Server</strong> needs access to the <strong>Database</strong> on port
<strong>3306</strong>.</li>
<li><strong>Web site consumer</strong>s need access to the <strong>Web Server</strong> on port
<strong>80</strong>.</li>
</ol>


<p>It&#8217;s fundamentally &#8220;X needs access to Y on port P&#8221; or if you want to
move it around &#8220;X is allowed on port P to Y&#8221; or &#8220;X is allowed P to Y.&#8221;
If you&#8217;ve done any access control before, you&#8217;ll notice the same
pattern of Actor(X), Resource(Y), and Permission(P).</p>

<p>I think there&#8217;s something about this that can be done
<a href="http://en.wikipedia.org/wiki/Security_Assertion_Markup_Language">SAML</a>,
but its focus is on the individual&#8217;s identity and access
control. Maybe there&#8217;s something I&#8217;m missing, but if I am, <a href="https://www.google.com/search?q=don't+understand+saml">I don&#8217;t
think I&#8217;m in the minority</a>.</p>

<p>So, we have a general form for recording the policy. There&#8217;s also the
other key take away from this one in that we&#8217;re not dealing with
IPs. Nowhere above is an IP listed. We&#8217;re talking about components
(Actors and Resources). This could take the form of:</p>

<pre><code>{'MyWebSiteModel':
  [
    'WebServer': 'DB:3306/tcp',
    'WebSiteUser': 'WebServer:80/tcp'
  ]
}
</code></pre>

<p>This is just the general description. It&#8217;s still not very useful. To
do that we have to instantiate it - basically, assign hosts/IPs to
each of the components:</p>

<pre><code>{'MyWebSiteInstance':
  'Model': 'MyWebSiteModel',
  'Components': {
    'DB': ['2.2.2.2'],
    'WebServer': ['1.1.1.1', 'web2.mydomain.com'],
    'WebSiteUser': ['0.0.0.0']
  }
}
</code></pre>

<p>Based on all of that information, you can form the rules that would be
needed to fit any firewall.</p>

<p>How does this address my initial problem? It comes down to fitting the
abstraction model to the handoff points:</p>

<ol>
<li>Application Developer: Generates the components and communication
patterns.</li>
<li>Application Administrator: Instantiates and assigns specific IPs or
hosts to each of the components.</li>
<li>Network Administrator: Gets a concise description to work from. If
the right amounnt of automation is applied, I might be marginalizing
the network admin for this task (that&#8217;s not completely true - there&#8217;s
plenty of sites that have enough device complexity that no simple
model will be immediately applicable - but it could still be used as a
starting point)..</li>
</ol>


<p>The model I used above is overtly simple. I already have questions
around RPCs, dynamic ranges, encapsulated protocols (* over http,
anyone?). I&#8217;m only starting the discussion here and dealing with the
minimal accomplishable step. It&#8217;s something to build on.</p>

<p>Now for the practical hand waving. The follow up pieces to this are
the tools to make it useful. We still need:</p>

<ul>
<li>A tool for recording this. This could be done via the above forms,
but it&#8217;d be nice to have it wrapped up in a bow. This is doubly
desired when we have to consider how all of the policies are
instantiated with the specific host information.</li>
<li>A tool for visualizing. It&#8217;d take in the general descriptions, and
show a pretty display for it.</li>
<li>A tool for converting the models to rules. It would take in the
general descriptions, the specific host information for each
instantiation, and then outputs some for iptables, pf, acls,
firewall policies, etc. Yeah, some magic here.</li>
</ul>


<p>So, first things being first, my <a href="http://github.com/cmceniry/ancl">next project</a>
is something for tracking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carbonite CEO on Rush Limbaugh]]></title>
    <link href="http://cmceniry.github.com/blog/2012/03/04/carbonite-ceo-on-rush-limbaugh/"/>
    <updated>2012-03-04T14:38:00-08:00</updated>
    <id>http://cmceniry.github.com/blog/2012/03/04/carbonite-ceo-on-rush-limbaugh</id>
    <content type="html"><![CDATA[<p>Whether you sit on the Left or the Right, or the left or the right, or
the middle, or the Middle, or underneath it all or wherever, I would
really appreciate if the discourse that we had didn&#8217;t resolve to
namecalling based on ignorance. I know that that doesn&#8217;t help get
money<sup>Wsupport</sup> for elections, but it keeps me from adding to the
&#8220;Don&#8217;t want to live on this planet anymore&#8221; meme. If you don&#8217;t
understand how that&#8217;s connected, please read
<a href="http://www.amazon.com/Republic-Lost-Money-Corrupts-Congress/dp/0446576433">Lessig</a>.</p>

<p>So, it makes me feel good to see that
<a href="http://www.carbonite.com/en/blog/A-Message-from-Carbonite-CEO-David-Friend-Regarding-Ads-on-Limbaugh">Carbonite</a>,
not only pulled their support for Limbaugh, but also will not continue
even in light of Limbaugh&#8217;s apology. Given multiple hyperbolic
statements by Limbaugh in the past, I don&#8217;t feel any sincerity. On the
other hand, I feel that Friend is sincere:</p>

<pre><code>“No one with daughters the age of Sandra Fluke, and I have two,
could possibly abide the insult and abuse heaped upon this
courageous and well-intentioned young lady. Mr. Limbaugh, with his
highly personal attacks on Miss Fluke, overstepped any reasonable
bounds of decency. Even though Mr. Limbaugh has now issued an
apology, we have nonetheless decided to withdraw our advertising
from his show. We hope that our action, along with the other
advertisers who have already withdrawn their ads, will ultimately
contribute to a more civilized public discourse.”
</code></pre>

<p>But even if I assume it&#8217;s a marketing move, it&#8217;s a marketing move that
puts the discussion in the right direction.</p>

<p>Friend is putting his money where his mouth is; I think I have to do
so as well (even if I don&#8217;t have a completely good use case for it for
me).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enterprise: Coda]]></title>
    <link href="http://cmceniry.github.com/blog/2012/03/04/enterprise-coda/"/>
    <updated>2012-03-04T14:29:00-08:00</updated>
    <id>http://cmceniry.github.com/blog/2012/03/04/enterprise-coda</id>
    <content type="html"><![CDATA[<p>I know I&#8217;m looking for confirmation bias here, but I think <a href="http://sethgodin.typepad.com/seths_blog/2012/03/why-lie.html">Seth
Godin</a>
does actually apply to my interactions with arrogant vendors.</p>

<pre><code>...when we clearly articulate why we're not going to do business, the
salesperson responds by questioning the judgment of the prospect.

...

Someone who chooses not to buy from you isn't stupid. They're not
unable to process ideas logically, nor are they unethical or
manipulated by others. No, it's simpler than that:

Given what they know and what they believe, the prospect is making
exactly the right decision.

We always make our decision based on what we know and
believe. That's a tautology, based on the definition... a decision
is the path you take based on what you know and believe, right?

The challenge, then, it seems to me, is to realize that perhaps
the prospect knows something you don't, or, just as likely,
doesn't believe what you believe. Your job as a marketer is to
figure out what your prospect's biases and worldview and fears and
beliefs are, and as a salesperson, your job is to help them know
what you know.
</code></pre>

<p>To Vendors: Rather than belittling what isn&#8217;t yours, how about you
talk about facts? I&#8217;m not an idiot who you can smokescreen, so don&#8217;t
waste our time doing that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In which Pooh is shown how 'Enterprise' can be a bug instead of a feature...]]></title>
    <link href="http://cmceniry.github.com/blog/2012/03/03/in-which-pooh-is-shown-how-enterprise-can-be-a-bug-instead-of-a-feature-dot-dot-dot/"/>
    <updated>2012-03-03T22:43:00-08:00</updated>
    <id>http://cmceniry.github.com/blog/2012/03/03/in-which-pooh-is-shown-how-enterprise-can-be-a-bug-instead-of-a-feature-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I was in a meeting the other day with a storage vendor selling their
wares. He asked what we had at the time, and I let him know, and was
extremely surprised by his response.</p>

<p>&#8220;We&#8217;re using X,&#8221; I said.</p>

<p>&#8220;Oh, well, that&#8217;s nice, but if you want an Enterprise solution, you
really need to be using ours,&#8221; he spouted off smuggly.</p>

<p>At which point, I had to say something. &#8220;It&#8217;s statements like that
that are why nobody likes [your company].&#8221;</p>

<p>My boss laughed, I think mostly to defuse it a bit, but he also said
&#8220;He&#8217;s not kidding.&#8221;</p>

<p>And I wasn&#8217;t. I really think that if you want to come into my house
and try to sell me something, the number one thing you do is not
insult me and what I currently have. At least, don&#8217;t try it until you
have an idea of how I feel about the solution. In this case, it wasn&#8217;t
that I was tied to it, but that that&#8217;s what we had, plain and simple.</p>

<p>The second thing that you may want to do is say something that
actually adds value, not just belittles the competition. Ok, so let&#8217;s
assume that Enterprise is a good thing - why is your solution more
Enterprise than what we have? In this case, he eventually added that
it was twice as fast as our current solution.</p>

<p>Which leads me to the third thing you may want to do. Don&#8217;t try to
sell on facts taken out of context. Ok, so it&#8217;s twice as fast. It&#8217;s
also 4 years newer technology. According to Moore&#8217;s Law applied to
storage, if you&#8217;re only twice as fast, you&#8217;re half or a quarter of
where you should be on the progression curve.</p>

<p>So, what does Enterprise mean? Based on the vendor comments, it&#8217;s:</p>

<ul>
<li>Better than what we have right now,</li>
<li>Just something we should trust the vendor on, and</li>
<li>Behind on the technology curve.</li>
</ul>


<p>Great sales job.</p>

<p>I think of the other &#8220;Enterprise&#8221; products that we have. Usually,
there&#8217;s one or more of the additional features:</p>

<ul>
<li>Complex licensing model - $ per core up to this rate, and then $$ per
core past that, but only if you have X amount of RAM, or it was
purchased on a Blue Moon.</li>
<li>Manual installation - It requires a GUI to install, can&#8217;t be
automated (even with something like a response file), and sometimes
you have to do parallel steps and hope that they don&#8217;t have race
conditions or start over when they do.</li>
<li>Inflexible - &#8220;You can do other things with it, but that would be a
custom setup and unsupported.&#8221;</li>
<li>Long patch cycles - This would be fine if we all didn&#8217;t already know
that half of what&#8217;s out there is commodity open source software. It
doesn&#8217;t matter you&#8217;ve wrapped it all up under an appliance bow -
it&#8217;s still vulnerable to whatever it is that the patch is for.</li>
<li>Lots of fingerpointing when it doesn&#8217;t interact correctly in my
owner situation or with other Enterprise software.</li>
</ul>


<p>So, what is Enterprise software? It can&#8217;t be software that we&#8217;re
paying for the quality of. What it really comes down to - it&#8217;s
software that we can outsource the blame to&#8230; if we&#8217;re lucky.</p>

<p>This doesn&#8217;t mean that there isn&#8217;t good Enterprise software out
there. Just means that what is good out there probably isn&#8217;t being
bought for the reasons that it&#8217;s being marketed for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bret Victor: Inventing on Principle]]></title>
    <link href="http://cmceniry.github.com/blog/2012/02/20/bret-victor-inventing-on-principle/"/>
    <updated>2012-02-20T11:38:00-08:00</updated>
    <id>http://cmceniry.github.com/blog/2012/02/20/bret-victor-inventing-on-principle</id>
    <content type="html"><![CDATA[<p>Watched a video there other day. It&#8217;s making it&#8217;s rounds on the
internet. It&#8217;s definitely worth watching:</p>

<ul>
<li><a href="http://vimeo.com/36579366">Inventing on Principle</a></li>
</ul>


<p>The key with it is to be mindful of what you&#8217;re doing when you start
to write something. Do something that matters - both from the
perspective of contributing to society, but also how it contributes to
society. Don&#8217;t just do something dumb that&#8217;s noble - make it awesome
and noble. At least, that&#8217;s what I got from it.</p>

<p>Makes me think of this blog post as well:</p>

<ul>
<li><a href="http://sethgodin.typepad.com/seths_blog/2012/01/who-cares.html">Who Cares?</a></li>
</ul>


<p>Those who care to put the finishing touches on something are the ones
who will do good things. Not necessarily the ones who will succeed or
excel (or appear to have excelled), but the ones who will have good
things to show.</p>

<p>Just food for thought.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language matters: Nitpik with Chef]]></title>
    <link href="http://cmceniry.github.com/blog/2012/02/05/language-matters-nitpik-with-chef/"/>
    <updated>2012-02-05T23:14:00-08:00</updated>
    <id>http://cmceniry.github.com/blog/2012/02/05/language-matters-nitpik-with-chef</id>
    <content type="html"><![CDATA[<p>For a while now, Chef has bothered me. Some of it I can blame on the
server setup (pull/push and exposure of general manifests), but
there&#8217;s been something that&#8217;s been bothering that I hadn&#8217;t been able
to put my finger on&#8230; until now.</p>

<p>First, I&#8217;m going to come out and admit my bias to a declarative model
over an imperative model. I won&#8217;t go into why. Burgess does a much
better job <a href="http://cfengine.com/markburgess/blog_order.html">describing this</a>.</p>

<p>My issue with Chef comes down to one word: action.</p>

<pre><code>package "ntp" do
  action :install
end
</code></pre>

<p>Now, to be fair, this is a very declarative description. If you dig
into what it&#8217;s doing, you&#8217;ll find that it&#8217;s interrogating the system
and only installing the package if it needs to, or alternatively,
it&#8217;ll make sure that the package exists. If that&#8217;s the case, it&#8217;s not
&#8220;install&#8221;ing every time, it&#8217;s making sure it&#8217;s
&#8220;install&#8221;ed. &#8220;Install&#8221;ing is a verb (it&#8217;s saying &#8220;action&#8221;), but
&#8220;Install&#8221;ed is a noun (state).</p>

<p>Why does this matter? Let&#8217;s go back to cfengine:</p>

<pre><code>commands:
  "yum install -y ntp"
    ifvarclass =&gt; "!ntp_installed"
</code></pre>

<p>Now, we&#8217;re further down the slope. This is a command/verb/action -
there&#8217;s now way around that. We&#8217;ve detached the descriptive goal of
what we want from how we&#8217;ve written. We have to know that our
convention for an installed package is to use that command structure,
and to make sure there&#8217;s a class that checks for if ntp is installed
or not. The var is in the check, not in the overall description.</p>

<p>So, why is Puppet better?</p>

<pre><code>package { "ntp":
  ensure =&gt; present
}
</code></pre>

<p>There&#8217;s no confusion around this one. It&#8217;s clearly saying make sure
this package is present/installed. The magic of how that happens is in
the underlying resource abstraction layer, which is cool in and of
itself, but it&#8217;s real win is that it allows you to continue thinking
in a declarative way, not in an imperative way. There&#8217;s no mental
flipping back and forth.</p>

<p>Ok - so why does <em>that</em> matter?</p>

<p><a href="http://en.wikipedia.org/wiki/Linguistic_relativity">Language matters</a>.
Language influences the way you conceptualize a problem, plain and
simple. The BDD guys hark on this as well. I think for sysadmining
roles to move forward, we need to think in a declarative way. Yes,
there are times for an imperative method, but not in system
descriptions.</p>

<p>So, it&#8217;s a nitpik, but it&#8217;s one that can have far reaching impact.</p>

<p>And yes, I know you can do execs in Puppet, so you can shoot yourself
in the foot, but you&#8217;ll have less misfires with Puppet than with other
tools because of the way it makes you think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First post]]></title>
    <link href="http://cmceniry.github.com/blog/2012/01/29/first-post/"/>
    <updated>2012-01-29T16:44:00-08:00</updated>
    <id>http://cmceniry.github.com/blog/2012/01/29/first-post</id>
    <content type="html"><![CDATA[<p>Got <a href="http://octopress.org/">Octopress</a> up and running. I like the idea
of a staticly deployed blog using a simple wiki-like mark up
language. I lose comments, but part of me thinks that having a blog is
a minimum for participating in the discussion. It&#8217;s a bit much, but
I&#8217;ll wait to see if it becomes an issue and figure it out then. For
now, I have a blog, so I&#8217;m going to focus on the writing.</p>

<p>Ran into a few issues setting up Octopress - somewhat my own
fault. The first was that I switched from rvm to rbenv. Wasn&#8217;t really
an issue, but rvm feels more ready for prime time on OSX Lion. I had
trouble getting ruby to build, and had to switch from LLVM to GCC. I
would think that it shouldn&#8217;t matter, but it seems to. I
<a href="https://github.com/kennethreitz/osx-gcc-installer/downloads">kennethretiz&#8217;s prebuilt packages</a>
to be the best install.</p>

<p>After that, got to the point where I do &#8216;bundle install&#8217; from the
Octopress clone, and it started complaining about not finding
&#8216;stdio.h&#8217; when building fsevent_watch. <a href="https://github.com/imathis/octopress/issues/320">Others have seen this
before</a>, but really
the issue is being <a href="https://github.com/thibaudgg/rb-fsevent/issues/20">addressed</a>
by the fsevent gem. Ends up being some fun differences between LLVM
and GCC again. I switched over to the prebuilt fsevent gem, and that
worked. Just a simple change in &#8216;Gemfile&#8217;:</p>

<pre><code>gem 'rubypants'
-gem 'rb-fsevent'
+gem 'rb-fsevent', :git =&gt; 'git://github.com/ttilley/rb-fsevent.git', :branch =&gt; 'pre-compiled-gem-one-off'
gem 'stringex'
</code></pre>

<p>Those are the main build issues, but also ran into a couple of issues
working with Octopress.</p>

<p>The first usage issue is that I&#8217;m still trying to figure out the
overall git workflow. You do a clone of the Octopress repo, and then
work within that clone. This seems a bit unclean to me. I want to keep
my actual blog source and the Octopress source separate, even if the
Octopress source is tracking. Add to that that I&#8217;m sending the site up
to Github&#8217;s personal pages for hosting it, so that has its own
repo. Just seems like this will bite me at some point.</p>

<p>The second issue is just getting familiar with markdown. I&#8217;m finding
out some of its limits, like how it can&#8217;t embed block quotes inside
numbered items. Nothing major, just learning myself.</p>

<p>But, Octopress is up and running, and posting to the Intarwebs, so
that has to be considered a success. Now I get to move on to the real
content.</p>

<p>&#8211;mac</p>
]]></content>
  </entry>
  
</feed>
