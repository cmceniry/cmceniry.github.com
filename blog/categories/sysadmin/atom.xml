<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SysAdmin | CorgaLabs Blog]]></title>
  <link href="http://cmceniry.github.com/blog/categories/sysadmin/atom.xml" rel="self"/>
  <link href="http://cmceniry.github.com/"/>
  <updated>2012-03-26T22:18:55-07:00</updated>
  <id>http://cmceniry.github.com/</id>
  <author>
    <name><![CDATA[Chris McEniry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ANCL: Application Network Communication Language]]></title>
    <link href="http://cmceniry.github.com/blog/2012/03/26/ancl-application-network-communication-language/"/>
    <updated>2012-03-26T20:16:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2012/03/26/ancl-application-network-communication-language</id>
    <content type="html"><![CDATA[<p>I'm starting a new project aimed at handling firewall policies in a
sane way. Well, it's not so much the firewall policies themselves, as
it about how we think about the firewall policies, or more precisely,
about how we thinkg about the application policies themselves.</p>

<p>All firewall configurations that I've been part of have come about in
a specific pattern:</p>

<ol>
<li>Someone writes an application, and puts together some documentation
that, if we're lucky, includes a visio of how the application
talks. Most of the time, it's something closer to a "open these ports
on your firewall to make this happen."</li>
<li>A sysadmin/app engineer/gwmth(guy who makes things happen - some
future post) looks over the documentation and identifies specific
hosts (IPs really) based on where the app components are running. He
puts together a ticket asking for specific ports to be open for
specific IPs or ranges. If you're lucky (I'll admit, I've been that
lazy admin), the admin puts together a visio of how it is all laid
out.</li>
<li>A netadmin takes the rules from the sys/app admin, tries to match
them up to existing rules or network ranges and adds them to the
firewall. If it's not a stateful device, it's worse than that as
you're limited by the language.</li>
</ol>


<p>So, we've got a little game of operator going on here. On top of that,
usually the only permanent records of the change show up in two
places: any ticketing system, and the firewall itself. This means that
to try to figure out what happened, you have to go sort through
tickets or reverse engineer it from the firewall itself.</p>

<p>If you've ever had to deal with this, you end up having to reverse
engineer it all the time.</p>

<p><strong>This doesn't work.</strong></p>

<p>There's now <a href="http://www.redsealnetworks.com/">tools</a> that will help
you with this, be more efficient at it. They look at all of the rules
and you can go back and check to see what's approved for what. But the
modelling is still done on a "this IP has access via this port to this
other IP, and this collection of IPs/ports are this model." But it's
still approaching it the wrong way - and if you're more efficient at
doing the wrong thing, you're just doing it wronger.</p>

<p>These tools do other things, but from an application perspective,
they're very late in the game. So, late that it feels like we're doing
network management backwards. I think we gotta go back to the
beginning. Instead of focusing on the network and building rules from
there, I want to start with the application and derive the rules from
there.</p>

<p>And yes, before we go there, documentation is good. I'm not trying to
give people a pass on the documentation. I'm trying to find a way that
makes it easier to document. So, keep that in mind.</p>

<p>Imagine that when you write an application, you can also easily
identify what network communication is needed relative to the
components for you application. For example, look at a simple LAMP
application. It fundamentally, has 3 components:</p>

<ol>
<li>the Database,</li>
<li>the Web Server, and</li>
<li>the web site consumers.</li>
</ol>


<p>And we can readily identify what access is needed:</p>

<ol>
<li>The <strong>Web Server</strong> needs access to the <strong>Database</strong> on port
<strong>3306</strong>.</li>
<li><strong>Web site consumer</strong>s need access to the <strong>Web Server</strong> on port
<strong>80</strong>.</li>
</ol>


<p>It's fundamentally "X needs access to Y on port P" or if you want to
move it around "X is allowed on port P to Y" or "X is allowed P to Y."
If you've done any access control before, you'll notice the same
pattern of Actor(X), Resource(Y), and Permission(P).</p>

<p>I think there's something about this that can be done
<a href="http://en.wikipedia.org/wiki/Security_Assertion_Markup_Language">SAML</a>,
but its focus is on the individual's identity and access
control. Maybe there's something I'm missing, but if I am, <a href="https://www.google.com/search?q=don't+understand+saml">I don't
think I'm in the minority</a>.</p>

<p>So, we have a general form for recording the policy. There's also the
other key take away from this one in that we're not dealing with
IPs. Nowhere above is an IP listed. We're talking about components
(Actors and Resources). This could take the form of:</p>

<pre><code>{'MyWebSiteModel':
  [
    'WebServer': 'DB:3306/tcp',
    'WebSiteUser': 'WebServer:80/tcp'
  ]
}
</code></pre>

<p>This is just the general description. It's still not very useful. To
do that we have to instantiate it - basically, assign hosts/IPs to
each of the components:</p>

<pre><code>{'MyWebSiteInstance':
  'Model': 'MyWebSiteModel',
  'Components': {
    'DB': ['2.2.2.2'],
    'WebServer': ['1.1.1.1', 'web2.mydomain.com'],
    'WebSiteUser': ['0.0.0.0']
  }
}
</code></pre>

<p>Based on all of that information, you can form the rules that would be
needed to fit any firewall.</p>

<p>How does this address my initial problem? It comes down to fitting the
abstraction model to the handoff points:</p>

<ol>
<li>Application Developer: Generates the components and communication
patterns.</li>
<li>Application Administrator: Instantiates and assigns specific IPs or
hosts to each of the components.</li>
<li>Network Administrator: Gets a concise description to work from. If
the right amounnt of automation is applied, I might be marginalizing
the network admin for this task (that's not completely true - there's
plenty of sites that have enough device complexity that no simple
model will be immediately applicable - but it could still be used as a
starting point)..</li>
</ol>


<p>The model I used above is overtly simple. I already have questions
around RPCs, dynamic ranges, encapsulated protocols (* over http,
anyone?). I'm only starting the discussion here and dealing with the
minimal accomplishable step. It's something to build on.</p>

<p>Now for the practical hand waving. The follow up pieces to this are
the tools to make it useful. We still need:</p>

<ul>
<li>A tool for recording this. This could be done via the above forms,
but it'd be nice to have it wrapped up in a bow. This is doubly
desired when we have to consider how all of the policies are
instantiated with the specific host information.</li>
<li>A tool for visualizing. It'd take in the general descriptions, and
show a pretty display for it.</li>
<li>A tool for converting the models to rules. It would take in the
general descriptions, the specific host information for each
instantiation, and then outputs some for iptables, pf, acls,
firewall policies, etc. Yeah, some magic here.</li>
</ul>


<p>So, first things being first, my <a href="http://github.com/cmceniry/ancl">next project</a>
is something for tracking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language matters: Nitpik with Chef]]></title>
    <link href="http://cmceniry.github.com/blog/2012/02/05/language-matters-nitpik-with-chef/"/>
    <updated>2012-02-05T23:14:00-08:00</updated>
    <id>http://cmceniry.github.com/blog/2012/02/05/language-matters-nitpik-with-chef</id>
    <content type="html"><![CDATA[<p>For a while now, Chef has bothered me. Some of it I can blame on the
server setup (pull/push and exposure of general manifests), but
there's been something that's been bothering that I hadn't been able
to put my finger on... until now.</p>

<p>First, I'm going to come out and admit my bias to a declarative model
over an imperative model. I won't go into why. Burgess does a much
better job <a href="http://cfengine.com/markburgess/blog_order.html">describing this</a>.</p>

<p>My issue with Chef comes down to one word: action.</p>

<pre><code>package "ntp" do
  action :install
end
</code></pre>

<p>Now, to be fair, this is a very declarative description. If you dig
into what it's doing, you'll find that it's interrogating the system
and only installing the package if it needs to, or alternatively,
it'll make sure that the package exists. If that's the case, it's not
"install"ing every time, it's making sure it's
"install"ed. "Install"ing is a verb (it's saying "action"), but
"Install"ed is a noun (state).</p>

<p>Why does this matter? Let's go back to cfengine:</p>

<pre><code>commands:
  "yum install -y ntp"
    ifvarclass =&gt; "!ntp_installed"
</code></pre>

<p>Now, we're further down the slope. This is a command/verb/action -
there's now way around that. We've detached the descriptive goal of
what we want from how we've written. We have to know that our
convention for an installed package is to use that command structure,
and to make sure there's a class that checks for if ntp is installed
or not. The var is in the check, not in the overall description.</p>

<p>So, why is Puppet better?</p>

<pre><code>package { "ntp":
  ensure =&gt; present
}
</code></pre>

<p>There's no confusion around this one. It's clearly saying make sure
this package is present/installed. The magic of how that happens is in
the underlying resource abstraction layer, which is cool in and of
itself, but it's real win is that it allows you to continue thinking
in a declarative way, not in an imperative way. There's no mental
flipping back and forth.</p>

<p>Ok - so why does <em>that</em> matter?</p>

<p><a href="http://en.wikipedia.org/wiki/Linguistic_relativity">Language matters</a>.
Language influences the way you conceptualize a problem, plain and
simple. The BDD guys hark on this as well. I think for sysadmining
roles to move forward, we need to think in a declarative way. Yes,
there are times for an imperative method, but not in system
descriptions.</p>

<p>So, it's a nitpik, but it's one that can have far reaching impact.</p>

<p>And yes, I know you can do execs in Puppet, so you can shoot yourself
in the foot, but you'll have less misfires with Puppet than with other
tools because of the way it makes you think.</p>
]]></content>
  </entry>
  
</feed>
