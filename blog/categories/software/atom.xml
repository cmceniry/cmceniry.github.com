<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software | CorgaLabs Blog]]></title>
  <link href="http://cmceniry.github.com/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://cmceniry.github.com/"/>
  <updated>2014-02-13T01:24:16-08:00</updated>
  <id>http://cmceniry.github.com/</id>
  <author>
    <name><![CDATA[Chris McEniry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First pass on clojure-jmxxmppgateway]]></title>
    <link href="http://cmceniry.github.com/blog/2012/08/13/first-pass-on-clojure-jmxxmppgateway/"/>
    <updated>2012-08-13T23:42:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2012/08/13/first-pass-on-clojure-jmxxmppgateway</id>
    <content type="html"><![CDATA[<p>I've been playing around a bit with clojure. It's nice to cut my teeth on somewhat LISP code. I'm not going to debate a lot of the language merits; I'm just going to say that I'm enjoying it.</p>

<p>I dusted off a project that's been sitting for a bit as it's cropped up again. I'm doing a lot more java work, and am in need to a JMX manager. Well, more that I'm in need of a way of accessing a JMX interface.</p>

<p>Originally, I had been using the <a href="http://crawler.archive.org/cmdline-jmxclient/">command-line JMX Client</a>, but I kept running into 2 problems when running that my monitoring instance (had been using cacti + nagios):</p>

<ol>
<li>The startup time for the jvm for the command-line client was too expensive. When attempting to run it against several different servers and several different metric points, it over ran the polling interval.</li>
<li>JMX and firewalls - @wheee.</li>
</ol>


<p>So, I started by translating JMX to the universal application transport protocol: HTTP. The first project is clojure-jmxhttpgateway. It takes a GET with JMXConn=$hostname:$port, JMXBean, and JMXAttribute as parameters, and passes that back to the JMX engine to get the ways and returns it back. It works pretty well, and took out the gaps in my cacti graphs.</p>

<p>That was two years ago. I made a couple of changes recently.</p>

<p>First, I updated the HTTP gateway to use the latest clojure and ring web framework. The second change was a little crazier. I like XMPP, so I figured I'd see what could come out of it and this is what I got:</p>

<pre><code>8:33:32 PM Chris McEniry: localhost:4270|java.lang:type=Memory|HeapMemoryUsage
8:33:32 PM clj@chriss-macbook-air.local: HeapMemoryUsage : {:committed 85000192, :init 0, :max 129957888, :used 8645872}
</code></pre>

<p>I like clojure. One of the fun parts - it's only 79 lines of code for the XMPP gateway. Sure, there's not much configurability to it, but that's still a lot to do in such a small set. It's really just a first pass, but it's a fun start.</p>

<p>Some immediate items for the (near?) future:</p>

<ol>
<li>Add security back in - be able to connect to a JMX listener with either SSL enabled and/or user/password auth.</li>
<li>Add write access - currently it's only doing reads.</li>
<li>Add a second layer of security - since it aggregates several connections, it needs to restrict who can connect to it/what they can request.</li>
<li>Refactor the utils from the XMPP and HTTP gateways. Right now, there's a lot of duplicated code which needs to be pulled out. At the same time, I don't want one project that's pulls in too many dependencies - e.g. if you're only running the HTTP gateway, you shouldn't need to get the XMPP libs and vice-versa. In general, the code and just use several cleanups.</li>
<li>Need tests.</li>
<li>Better config files - i.e. fix the XMPP gateway so that it actually uses a config file.</li>
<li>Do the library name spaces "the proper way" - i.e. include domain name in them.</li>
</ol>


<p>I think I have my work cut out for me.</p>

<p>If you're interested in any of this, check out the github repos:</p>

<ol>
<li><a href="https://github.com/cmceniry/clojure-jmxhttpgateway">https://github.com/cmceniry/clojure-jmxhttpgateway</a></li>
<li><a href="https://github.com/cmceniry/clojure-jmxxmppgateway">https://github.com/cmceniry/clojure-jmxxmppgateway</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[abUser Stories]]></title>
    <link href="http://cmceniry.github.com/blog/2012/04/28/abuser-stories/"/>
    <updated>2012-04-28T10:25:00-07:00</updated>
    <id>http://cmceniry.github.com/blog/2012/04/28/abuser-stories</id>
    <content type="html"><![CDATA[<p>Was just listening to <a href="http://www.pauldotcom.com/">PaulDotCom's security podcast</a>
(<a href="http://traffic.libsyn.com/pauldotcom/PaulDotCom-283-Part2.mp3">283</a>)
[NSFW], and they made a comment about "Abuse Cases." I haven't dug
into it yet, but I really like the sound of that. Part of it is a bit
tongue in cheek, but there's more there. I'm constantly subjected to
the Use Case and the User Story, and most of the time, those are
feature focused:</p>

<pre><code>As a user, I want to be able to store my data...
</code></pre>

<p>Now, that's not always the case, as we've been able to get some others
in there:</p>

<pre><code>As a day-to-day operator, I need to be able to perform
maintenance on a node.
</code></pre>

<p>and</p>

<pre><code>As a day-to-day operator, I need to be able to collect metric X to
see the health of the system.
</code></pre>

<p>So, there's definitely credence to the idea of "Users stories are for
everyone," or "All of use are users," so why would we need to use a
different term. Couldn't we just say that it's all already covered?</p>

<p>Well, there's two things that I think are ignored there.</p>

<p>First, I'm currently been working a great deal on compliance, so I'm
thinking of it as Role Separation. A User is a very specific role that
is very different from an Operator, or an Attacker, or even subclasses
of those (Store Operator versus System Operator versus Application
Operator).</p>

<p>Second, <a href="http://en.wikipedia.org/wiki/Linguistic_relativity">language affects the way we think</a>.
This is not new, this is not some crazy idea. We have so much baggage
with each term that already exists.</p>

<p>To me, a User Story is feature focused. It explores the Positive
Space. We could include the operational examples as part of
this. These are things we <em>want it to do</em>.</p>

<p>On the flip side, an Abuser Story is anti-feature focused. It explores
the Negative Space. It's for things we <em>don't want it to do</em>.</p>

<p>Judy Neher has a presentation at Agile 2012 for <a href="http://submit2012.agilealliance.org/node/13318">Abuser Stories: Thinking Like the Bad Guy to Reduce Security Vulnerabilities</a>.
I look forward to seeing what comes out of that.</p>

<p>Yes, I see the slippery slope that I'm on. We could get so prolific
that every type of story actor gets their own top level
classification. The User Stories approach does make you think through
the different roles that will use it, so all of the different top
level labels may be superfluous. There is validity to that
concern.</p>

<p>But with the baggage, I think that adding something with emphasis may
be necessary for a time. Until it's widely accepted about bringing in
the negative space, I'm going to keep using the term Abuser Stories
(assuming I'm not treading to much on victims of violence...).</p>
]]></content>
  </entry>
  
</feed>
